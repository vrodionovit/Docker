name: Build OnvifDeviceManager deb package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Create Dockerfile
      run: |
        cat << EOF > Dockerfile
        FROM ubuntu:latest

        ENV DEBIAN_FRONTEND=noninteractive

        RUN apt-get update && apt-get install -y \
            git \
            pkg-config \
            libgtk-3-dev \
            make \
            g++ \
            python3-pip \
            bison \
            flex \
            libtool \
            libssl-dev \
            zlib1g-dev \
            libasound2-dev \
            libgudev-1.0-dev \
            libx11-xcb-dev \
            gettext \
            libpulse-dev \
            nasm \
            libntlm0-dev

        RUN pip3 install meson ninja cmake

        WORKDIR /build

        RUN git clone https://github.com/Quedale/OnvifDeviceManager.git

        WORKDIR /build/OnvifDeviceManager

        RUN ./autogen.sh --prefix=$(pwd)/dist --enable-latest

        RUN make -j$(nproc)

        RUN make deb

        CMD ["/bin/bash"]
        EOF

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: onvifmgr-builder:latest
        outputs: type=docker,dest=/tmp/onvifmgr-builder.tar

    - name: Load Docker image
      run: docker load --input /tmp/onvifmgr-builder.tar

    - name: Extract deb package
      run: |
        docker run --rm -v $(pwd):/output onvifmgr-builder:latest bash -c "cp *.deb /output/"

    - name: List deb packages
      run: ls -l *.deb

    - name: Upload deb package
      uses: actions/upload-artifact@v3
      with:
        name: onvifmgr-deb
        path: ./*.deb

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./*.deb
        asset_name: onvifmgr.deb
        asset_content_type: application/vnd.debian.binary-package
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
